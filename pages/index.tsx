import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import connectMongo from '../utils/connectMongo';
import Test from '../models/testModel';
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { Sig } from '../components/dashboard/Sig';
import { sigNameOptions } from '../lib/sigProjNames';

// const SIGS = ["HAT", "NOT", "CAMP"]

const Home: React.FC<{ tests: any; responses: any }> = ({ tests, responses }) => {
  const [title, setTitle] = useState('');
  const [sigName, setSigName] = useState('');
  const [showPopup, setShowPopup] = useState(false);
  const router = useRouter();

  const fetchSigIssues = async () => {
    try {
      const apiUrl = `/api/fetchActiveIssuesForSig`;
      const response = await fetch(apiUrl);

      if (response.ok) {
        const data = await response.json();
        return data;
      } else {
        console.error(
          `Error fetching active issues for SIG: ${response.status}`
        );
      }
    } catch (error) {
      console.error(`Error when fetching active issues for SIG: ${error}`);
    }
  };

  const responseData = {
    script: '646d409e20bdfd7af352b8ba', //OS
    gen_context: [], //from script + OS_object
    title: 'Undercommitted', //from script
    sigName: 'CAMP', //from OS
    rcs: [], //from script
    description: 'AYO is significantly undercommitted in this sprint', //from script
    projName: 'Q&A Buddy', //from OS
    hypothesisList: [], //initialize to empty
    p5Canvas: []
  };

  async function createResponse(responseData) {
    try {
      const res = await fetch('/api/test/create_response', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(responseData),
      });
    } catch (error) {
      console.error(`Error when creating new response: ${error}`);
    }
  }

  // api fetch [
  //   {
  //     _id: '653ba6545410fd0bc39fad3a',
  //     script_id: '6549b9e45410fd0bc39fad26',
  //     name: 'Support students in planning a Status Update for their project',
  //     date_triggered: '2023-10-27T12:00:00.000Z',
  //     expiry_time: '2023-11-03T12:00:00.000Z',
  //     repeat: false,
  //     issue_target: {
  //       targetType: 'project',
  //       name: 'Human-AI Tools for Concept Expression',
  //       sig: 'Human-AI Tools',
  //       sigHead: [Object],
  //       students: [Array],
  //       facultyMentor: [Object],
  //       slackChannel: 'proj-human-ai-conception',
  //       statusUpdateDate: '2023-11-03T17:00:00.000Z',
  //       tools: [Object]
  //     },
  //     target_hash: '52132b5c5b8d7f4479bed12865b6f897c99f6568',
  //     computed_strategies: [ [Object], [Object] ],
  //     __v: 0
  //   }
  // ]

  // useEffect(() => {
  //   // createResponse(responseData);
  // }, []);

  // Get Script_ID to generate href link to Authoring Page
  const handleScriptCardClick = async (title) => {
    try {
      const res = await fetch('/api/scripts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ title }),
      });
      if (res.ok) {
        const { scriptId } = await res.json();
        router.push(`/scripts/${scriptId._id}`);
      } else {
        console.log('Script not found');
      }
    } catch (error) {
      console.log('Error fetching script:', error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const res = await fetch('/api/test/add', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title: title,
        sigName: sigName,
        script: '',
        Description: 'Test',
        Detector: ['', ''],
        GeneralContext: [''],
        RC_C_S: [
          {
            id: 0,
            rootCause: '',
            context: [''],
            strategy: '',
          },
        ],
      }),
    });

    const data = await res.json();

    // Reset input fields and hide the pop-up
    setTitle('');
    setSigName('');
    setShowPopup(false);
  };

  const createTest = () => {
    setShowPopup(true);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>My OSE Dashboard</h1>

        <p className={styles.description}>
          Get started by creating{' '}
          <code className={styles.code}>a new script</code>
        </p>
        <button onClick={createTest}>Create Script</button>

        <div className={styles.grid}>
          {tests.map((test) => (
            <a
              // href="https://nextjs.org/docs"
              onClick={() => handleScriptCardClick(test.title)}
              key={test.script}
              className={styles.card}
            >
              <h2>{test.title} &rarr;</h2>
              <p>{test.sigName}</p>
            </a>
          ))}
        </div>

        {showPopup && (
          <div className={styles.popup}>
            <form onSubmit={handleSubmit}>
              <label>
                Title:
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                />
              </label>
              <label>
                SigName:
                <input
                  type="text"
                  value={sigName}
                  onChange={(e) => setSigName(e.target.value)}
                />
              </label>
              <button type="submit">Submit</button>
            </form>
          </div>
        )}

        <p className={styles.description}>
          Address Your <code className={styles.code}>Active Issues</code>
        </p>
        {sigNameOptions.map((sig) => (
          <Sig key={sig} name={sig} responses={responses} />
        ))}
      </main>
    </div>
  );
}
export default Home;

export const getServerSideProps = async () => {
  try {
    console.log('CONNECTING TO MONGO');
    let tests = await connectMongo({ find: 'scripts' });
    tests.forEach((x) => delete x._id);

    // console.log('TEST ', tests)

    let responses = await connectMongo({find: "responses"});
    responses.forEach((x) => {
      x._id = x._id.toString()
    })
    // console.log("RESPONSES:", responses)

    return {
      props: {
        tests: tests,
        responses: responses,
      },
    };
  } catch (error) {
    console.log(error);
    return {
      notFound: true,
    };
  }
};
